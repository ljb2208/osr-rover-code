#!/usr/bin/env python2

PACKAGE = "osr_planner"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("iterations", int_t, 0, "Iterations", 30000, 1, 100000)
gen.add("manual_mode", bool_t, 0, "Enable Manual Mode", True)
gen.add("visualization_enabled", bool_t, 0, "Enable Visualizations", True)
gen.add("visualization2D_enabled", bool_t, 0, "Enable 2D Visualizations", True)
gen.add("visualization_delay", double_t, 0, "Visualization Delay", 0, 0.0001, 0.1)
gen.add("reverse_enabled", bool_t, 0, "Enable Reverse", True)

gen.add("length", double_t, 0, "Vehicle Length", 2.65, 0.01, 10)
gen.add("width", double_t, 0, "Vehicle Width", 1.65, 0.01, 10)
gen.add("bloating", double_t, 0, "Vehicle Bloating", 0, 0, 10)
gen.add("turn_radius", double_t, 0, "Vehicle Turn Radius", 6, 0.01, 100)
gen.add("min_road_width", double_t, 0, "Minimum Road Width", 2, 0.01, 100)

gen.add("dubins_lookup", bool_t, 0, "Enable Dubins Lookup", False)
gen.add("twoD", bool_t, 0, "Enable 2D", True)
gen.add("dubins", bool_t, 0, "Enable Dubins", False)
gen.add("dubins_shot", bool_t, 0, "Enable Dubins Shot", True)
gen.add("dubins_shot_dist", double_t, 0, "Dubins Shot Dist.", 100, 0, 1000)
gen.add("dubins_width", double_t, 0, "Dubins Width", 15, 0, 100)
gen.add("dubins_step_size", double_t, 0, "Dubins Step Size", 1, 0, 100)

gen.add("penalty_turning", double_t, 0, "Turning Penalty", 1.05, 0, 10)
gen.add("penalty_reversing", double_t, 0, "Reversing Penalty", 2.0, 0, 10)
gen.add("penalty_cod", double_t, 0, "Change of Dir. Penalty", 2.0, 0, 10)
gen.add("rs_expansion_factor", double_t, 0, "Reeds Shepp Expansion Factor", 4, 0, 1000)

gen.add("voronoi_max", double_t, 0, "Max Distance calc", 7, 0, 100)
gen.add("voronoi_alpha", double_t, 0, "Voronoi Alpha Param", 20, 0, 100)
gen.add("voronoi_theta", double_t, 0, "Voronoi Theta Param", 5, 0, 100)

gen.add("smooth_alpha", double_t, 0, "Smooth alpha term", 0.1, 0, 1)
gen.add("smooth_curvature", double_t, 0, "Smooth curvature term", 0.2, 0, 1)
gen.add("smooth_obstacle", double_t, 0, "Smooth obstacle term", 0.2, 0, 1)
gen.add("smooth_smooth", double_t, 0, "Smooth smoothness term", 0.2, 0, 1)
gen.add("smooth_voronoi", double_t, 0, "Smooth voronoi term", 0.2, 0, 1)
gen.add("smooth_iterations", int_t, 0, "Max Smooth iterations", 500, 1, 1000)

exit(gen.generate(PACKAGE, "osr_planner", "PlannerSettings"))
            
            